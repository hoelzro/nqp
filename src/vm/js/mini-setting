use mininqpmo;

# We'll re-export all of the HOWs that we import from the meta-objects
# library. (Questionable whether we should need to do this - maybe the
# set of mappings the setting has should just be taken as the default
# for any program using it. OTOH, there's not a good way to factor
# this just yet.)

my module EXPORTHOW {
    nqp::scwbdisable();
    ($?PACKAGE.WHO)<module>       := NQPModuleHOW;
    ($?PACKAGE.WHO)<class>        := NQPClassHOW;
    nqp::scwbenable();
}

sub print(*@args) {
    for @args {
        nqp::print($_);
    }
    1;
}

sub say(*@args) {
    print(|@args);
    print("\n");
}

sub open($filename, :$r, :$w, :$a, :$bin) {
    my $mode := $w ?? 'w' !! ($a ?? 'wa' !! 'r');
    my $handle := nqp::open($filename, $mode);
    nqp::setencoding($handle, 'utf8') unless $bin;
    $handle;
}

sub close($handle) {
    nqp::closefh($handle);
}

sub slurp ($filename) {
    my $handle := open($filename, :r);
    my $contents := nqp::readallfh($handle);
    nqp::closefh($handle);
    $contents;
}

sub spew($filename, $contents) {
    my $handle := open($filename, :w);
    nqp::printfh($handle, $contents);
    nqp::closefh($handle);
}

my $test_counter       := 0;
my $todo_upto_test_num := 0;
my $todo_reason        := '';

sub plan($quantity) {
    say("1..$quantity");
}

sub ok($condition, $desc?) {
    $test_counter := $test_counter + 1;

    unless $condition {
        print("not ");
    }
    print("ok $test_counter");
    if $desc {
        print(" - $desc");
    }
    if $test_counter <= $todo_upto_test_num {
        print($todo_reason);
    }
    print("\n");
    
    $condition ?? 1 !! 0
}
